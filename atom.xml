<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://as8593189.github.io</id>
    <title>风丿雪的博客</title>
    <updated>2021-03-21T08:17:29.853Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://as8593189.github.io"/>
    <link rel="self" href="https://as8593189.github.io/atom.xml"/>
    <subtitle>随便写写，随便记记。恰逢最好的时节，做最喜欢的事。</subtitle>
    <logo>https://as8593189.github.io/images/avatar.png</logo>
    <icon>https://as8593189.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 风丿雪的博客</rights>
    <entry>
        <title type="html"><![CDATA[Linux_mysql安装和使用中出现的问题]]></title>
        <id>https://as8593189.github.io/post/linux_mysql-an-zhuang-he-shi-yong-zhong-chu-xian-de-wen-ti/</id>
        <link href="https://as8593189.github.io/post/linux_mysql-an-zhuang-he-shi-yong-zhong-chu-xian-de-wen-ti/">
        </link>
        <updated>2021-03-21T08:02:44.000Z</updated>
        <content type="html"><![CDATA[<p>1.安装第一坑：位数（32位/64位）<br>
2.第二坑 sysbench等软件需要额外装lib，官网上有，注意位数，尤其是16.so 之类的东西，都需要额外的driver包，可能还需要建立其他的软连接<br>
3.第三坑 默认密码不能用，进不去mysql。方法是修改配置文件，加入跳过密码验证指令，然后登陆后清除原密码，用更新语句加上新密码<br>
4.第四坑 进不去mysql命令行。无论敲什么都是，Client does not support authentication protocol，那么应该进入mysql bin目录，手动启动mysql程序，然后--user --password 输入账号密码即可</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法_二叉树递归]]></title>
        <id>https://as8593189.github.io/post/suan-fa-_-er-cha-shu-di-gui/</id>
        <link href="https://as8593189.github.io/post/suan-fa-_-er-cha-shu-di-gui/">
        </link>
        <updated>2021-03-08T13:34:31.000Z</updated>
        <content type="html"><![CDATA[<p>①递归终止条件<br>
②由某层到某层的条件是什么</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法_动态规划]]></title>
        <id>https://as8593189.github.io/post/suan-fa-_-dong-tai-gui-hua/</id>
        <link href="https://as8593189.github.io/post/suan-fa-_-dong-tai-gui-hua/">
        </link>
        <updated>2021-03-03T12:45:22.000Z</updated>
        <content type="html"><![CDATA[<p>要知道一个初始值 dp[1]\dp[2]之类<br>
其次，我们设在某状态下dp[i]为我们要求的目标<br>
留意以下状态 dp[i-j] dp[i] j*(i-j)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法_常用方法]]></title>
        <id>https://as8593189.github.io/post/suan-fa-_-chang-yong-fang-fa/</id>
        <link href="https://as8593189.github.io/post/suan-fa-_-chang-yong-fang-fa/">
        </link>
        <updated>2021-03-01T14:48:12.000Z</updated>
        <content type="html"><![CDATA[<p>1.大数快速幂取余<br>
设a为大数,,把a的n次方变为(a²)的1/2次方或是a*((a²))的1/2次方<br>
2.二进制快速幂<br>
设n的二进制为b1 b2 b3 ... bm<br>
然后x的n次方就是 x 的(b1 b2 ... bn次方)也即是 x 的 (2的0次方<em>b1  +  2的一次方</em>b2      +....+ 2的n次方*bm-1)次方<br>
bm可以用 位运算做。b1 为 n&amp;1  b2为 (n&gt;&gt;1)&amp;1<br>
每次循环就能得到 x0   x1  x²这些<br>
3.取相反数时，可能超出int的表达范围，因此我们可以用long来计算</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法_深搜]]></title>
        <id>https://as8593189.github.io/post/suan-fa-_-shen-sou/</id>
        <link href="https://as8593189.github.io/post/suan-fa-_-shen-sou/">
        </link>
        <updated>2021-02-28T15:19:35.000Z</updated>
        <content type="html"><![CDATA[<p>深搜：<br>
//先搞一个flag<br>
Visit[v]=true;<br>
//再遍历<br>
for(v=0;v&lt;num;v++){<br>
if(!Visit[v]){<br>
DFS(V);<br>
}<br>
}<br>
例如今天做的一个题，对矩阵找字符串。总结来为三点：<br>
①给出循环终止条件：不符合题意的。<br>
②访问这个节点，修改其flag。<br>
③DFS递归他自己。<br>
④恢复现场，或是回溯。<br>
public boolean DFS(char[] words ,int i,int j,int k,char[][] board) {<br>
//越界或是走一步不是想要的结果<br>
if (i&lt;0||i&gt;=board.length||j&lt;0||j&gt;=board[0].length||words[k]!=board[i][j]) {<br>
return false;<br>
}<br>
//若是最终完成遍历，返回正确<br>
if (k==(words.length-1)) {<br>
return true;<br>
}<br>
//已经访问了，设为0<br>
board[i][j]='\0';<br>
//对相邻节点遍历<br>
boolean flag = DFS(words,i+1,j,k+1,board) || DFS(words,i-1,j,k+1,board) ||<br>
DFS(words,i,j+1,k+1,board) || DFS(words,i,j-1,k+1,board);<br>
//恢复节点<br>
board[i][j]=words[k];<br>
return flag;<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法_二维数组类题型]]></title>
        <id>https://as8593189.github.io/post/suan-fa-_-er-wei-shu-zu-lei-ti-xing/</id>
        <link href="https://as8593189.github.io/post/suan-fa-_-er-wei-shu-zu-lei-ti-xing/">
        </link>
        <updated>2021-02-28T02:04:49.000Z</updated>
        <content type="html"><![CDATA[<p>（1）判空条件<br>
①数组地址本身为空<br>
matrix<mark>null<br>
②数组本身定义为空<br>
matrix.length</mark>0<br>
③一维数组为空且二维数组也为空的空数组<br>
****此时一维数组长度为1，二维数组长度为0<br>
matrix.length<mark>1&amp;&amp;matrix[0].length</mark>0<br>
（2）二维数组本身可以看成是B+树<br>
从右上开始看。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法_查找方法总结]]></title>
        <id>https://as8593189.github.io/post/suan-fa-_-cha-zhao-fang-fa-zong-jie/</id>
        <link href="https://as8593189.github.io/post/suan-fa-_-cha-zhao-fang-fa-zong-jie/">
        </link>
        <updated>2021-02-28T02:02:26.000Z</updated>
        <content type="html"><![CDATA[<p>（1）二分法：<br>
注意以下要点：①判空的必要②起始点要为0以防越界，判断条件为≤<br>
//判断下开头<br>
if (matrix[j][0]==target) {<br>
return true;<br>
}<br>
//以0开始，以length结束<br>
int low =0;<br>
int high = matrix[j].length-1;<br>
//条件为小于等于<br>
while(low&lt;=high) {<br>
int mid = (low+high)/2;<br>
if (target == matrix[j][mid]) {<br>
return true;<br>
} else if (target&lt;matrix[j][mid]) {<br>
high = mid -1;<br>
} else {<br>
low=mid+1;<br>
}<br>
}<br>
return false;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021_2_27 吐槽_吐血！！！]]></title>
        <id>https://as8593189.github.io/post/2021_2_27-tu-cao-_-tu-xie/</id>
        <link href="https://as8593189.github.io/post/2021_2_27-tu-cao-_-tu-xie/">
        </link>
        <updated>2021-02-27T12:59:21.000Z</updated>
        <content type="html"><![CDATA[<p>系统重装，以前存在C盘的博客文章全没了！！<br>
重新安装gridea后，其会与远程同步，然后进行一次  强推！！！！<br>
完蛋，这下GitHub里面原本的文章也没了，git以前是装在C盘，其本地仓库也没了，历史记录也没了。<br>
彻底恢复不了了。</p>
<p>真的是吐血！！！！！！！</p>
]]></content>
    </entry>
</feed>